services:
  course-tracker:
    depends_on:
      postgres:
        condition: service_healthy
    image: "course-tracker:1.0.0"
    container_name: "course-tracker"
    ports:
      - 8080:8080
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/sbip
      - JAVA_TOOL_OPTIONS=-javaagent:/workspace/BOOT-INF/lib/opentelemetry-javaagent-2.2.0.jar
      # - export OTEL_TRACES_EXPORTER=none
      - export OTEL_METRICS_EXPORTER=none
      # - export OTEL_LOGS_EXPORTER=logging
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
      - OTEL_METRIC_EXPORT_INTERVAL=15000
      # - OTEL_PROPAGATORS="tracecontext,baggage"

  postgres:
    image: "postgres:15.2"
    container_name: "sbip-postgres"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - ./docker/postgresql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user"]
      interval: 2s
      timeout: 5s
      retries: 20

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.96.0
    command: ["--config=/etc/otelcol-contrib/config.yaml"]
    environment:
      - ELASTIC_APM_SECRET_TOKEN=supersecrettoken
      - ELASTIC_APM_SERVER_ENDPOINT=ec2-52-47-68-47.eu-west-3.compute.amazonaws.com:8200
    volumes:
      - ./docker/otel/otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    ports:
      # - 1888:1888 # pprof extension
      # - 8888:8888 # Prometheus metrics exposed by the Collector
      # - 8889:8889 # Prometheus exporter metrics
      # - 13133:13133 # health_check extension
      - 4317:4317 # OTLP gRPC receiver
      - 4318:4318 # OTLP http receiver
      # - 55679:55679 # zpages extension
